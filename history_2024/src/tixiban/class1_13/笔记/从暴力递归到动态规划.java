package tixiban.class1_13.笔记;

public class 从暴力递归到动态规划 {
    /**
     * 什么样的暴力递归可以继续优化？
     *
     * 有重复调用同一个子问题的解的暴力递归，可以优化。
     * 如果每一个子问题都是不同的解，无法优化也不用优化。
     */

    /**
     * 暴力递归和动态规划的关系
     *
     * 某一个暴力递归，有解的重复调用，就可以把这个暴力递归优化成动态规划。
     * 任何动态规划，都一定对应着某一个有重复过程的暴力递归。
     * 但不是所有暴力递归都一定对应着动态规划。
     *
     * 解决一个问题，可能有很多暴力尝试的方法。
     * 做题只要找到一个尝试的方法，然后看一下能否改动态规划。
     */

    /**
     * 如何找到某个问题的动态规划方式？
     *
     * 1、设计暴力递归：重要原则 + 4种常见尝试模型！重点！
     * 2、分析有没有重复解：套路解决
     * 3、从记忆化搜索到严格表结构，实现动态规划：套路解决
     * 4、看能否继续优化：套路解决
     */

    /**
     * 面试中合计暴力递归的原则
     *
     * 1、每个可变参数的类型，不要比int类型更复杂
     * 2、如果违反1，那么只能让类型突破到一维线性结构（字符串），并且只能是单一可变参数（贴纸问题，直接拿整个字符串做key，傻缓存法）
     * 3、如果违反1，但不违反2，只需要做到记忆化搜索即可
     * 4、可变参数的个数，能少则少
     */

    /**
     * 知道了暴力递归设计原则，然后呢？
     *
     * 一定要逼自己找到不违反原则的暴力尝试！
     * 如果找到的暴力尝试不符合原则，马上舍弃，找新的
     * 如果某个题目突破了设计原则，那它一定极难极难，面试出现概率低于5%
     */

    /**
     * 4种常见的尝试模型
     *
     * 1、从左往右的尝试模型
     * 2、范围上的尝试模型
     * 3、多样本位置全对应的尝试模型
     * 4、寻找业务限制的尝试模型
     */

    /**
     * 怎么看有没有重复解
     *
     * 举几个具体的例子，可以只看前几层调用，有没有重复解一看便知
     */

    /**
     * 动态规划的进一步优化
     *
     * 1、空间压缩（一维表代替二维表，二维表代替三维表）
     * 2、状态化简（枚举决策过程改为O(1)的计算）
     * 3、四边形不等式
     * 4、其他优化技巧
     */

    /**
     * 暴力递归到动态规划套路总结
     *
     * 1、已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用
     * 2、找到哪些参数的变化会影响递归返回值，对每一个参数列出变化范围
     * 3、参数间的所有组合数量，意味着表的大小
     * 4、很容易得到记忆化搜索的方法，也就是傻缓存
     * 5、规定好严格表的大小，分析位置的依赖顺序，从base case填写到最终解
     * 6、对于有枚举行为的决策过程，进一步优化
     */
}
